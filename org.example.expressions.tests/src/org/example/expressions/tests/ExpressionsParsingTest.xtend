/*
 * generated by Xtext 2.19.0
 */
package org.example.expressions.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.example.expressions.expressions.ExpressionsModel
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import static extension org.junit.Assert.*
import org.example.expressions.expressions.VariableRef
import org.example.expressions.expressions.Plus
import org.example.expressions.expressions.IntConstant
import org.example.expressions.expressions.StringConstant
import org.example.expressions.expressions.BoolConstant
import org.example.expressions.expressions.Expression
import org.example.expressions.expressions.Minus
import org.example.expressions.expressions.MulOrDiv
import org.example.expressions.expressions.Or
import org.example.expressions.expressions.And
import org.example.expressions.expressions.Equality
import org.example.expressions.expressions.Comparison
import org.example.expressions.expressions.Not
import org.example.expressions.ExpressionsModelUtil
import org.example.expressions.expressions.ExpressionsPackage
import org.example.expressions.validation.ExpressionsValidator
import org.eclipse.xtext.testing.validation.ValidationTestHelper

@ExtendWith(InjectionExtension)
@InjectWith(ExpressionsInjectorProvider)
class ExpressionsParsingTest {
	@Inject extension ParseHelper<ExpressionsModel>
	@Inject extension ValidationTestHelper
	@Inject extension ExpressionsModelUtil 
	
	@Test
	def void loadModel() {
		val result = '''
			var a = 1
		'''.parse
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	@Test
	def void testEvalExpression() {
		"eval 10".parse.assertNotNull
	}
	
	@Test
	def void testVariable() {
		"var i = 10".parse.assertNotNull
	}
	
	@Test
	def void testVariableReference() {
		'''
		var i = 10
		eval i
		'''.parse => [
			(elements.last.expression as VariableRef).variable.assertSame(elements.head)
		]
	}
	
	def private String stringRepr(Expression e) {
		switch (e) {
			Plus: '''(«e.left.stringRepr» + «e.right.stringRepr»)'''
			Minus: '''(«e.left.stringRepr» - «e.right.stringRepr»)'''
			MulOrDiv:'''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			Or: '''(«e.left.stringRepr» || «e.right.stringRepr»)'''
			And: '''(«e.left.stringRepr» && «e.right.stringRepr»)'''
			Equality: '''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			Comparison: '''(«e.left.stringRepr» «e.op» «e.right.stringRepr»)'''
			Not: '''(!«e.expression.stringRepr»)'''
			IntConstant: '''«e.value»'''
			StringConstant: '''«e.value»'''
			BoolConstant: '''«e.value»'''
			VariableRef: '''«e.variable.name»'''
		}.toString
	}
	
	def private assertRepr(CharSequence input, CharSequence expected) {
		("eval " + input).parse => [
			expected.assertEquals(
				elements.last.expression.stringRepr
			)
		]
	}
	
	@Test
	def void testPlus() {
		"10 + 5 + 1 + 2".assertRepr("(((10 + 5) + 1) + 2)")
	}
	
	@Test def void testParenthesis() {
		10.assertEquals(("eval (10)".parse.elements.head.expression as IntConstant).value)
	}
	
	@Test def void testPlusWithParenthesis() {
		"(10 + 5) + (1 + 2)".assertRepr("((10 + 5) + (1 + 2))")
	}
	
	@Test def void testMinus() {
		"10 - 5 - 1 - 2".assertRepr("(((10 - 5) - 1) - 2)")
	}
	
	@Test def void testMinusWithParenthesis() {
		"(10 - 5) - (2 - 1)".assertRepr("((10 - 5) - (2 - 1))")
	}
	
	@Test def void testPlusMulPrecedence() {
		"10 + 5 * 2 - 5 / 1".assertRepr("((10 + (5 * 2)) - (5 / 1))")
	}

	@Test def void testPrecedences() {
		"!true||false&&1>(1/3+5*2)".assertRepr("((!true) || (false && (1 > ((1 / 3) + (5 * 2)))))")
	}
	
	@Test def void variablesBeforeVariable() {
		'''
		eval true
		var i = 0
		eval i + 10
		var j = i
		eval i + j
		'''.parse => [
			assertVariablesDefinedBefore(0, "")
			assertVariablesDefinedBefore(1, "")
			assertVariablesDefinedBefore(2, "i")
			assertVariablesDefinedBefore(3, "i")
			assertVariablesDefinedBefore(4, "i,j")
		]
	}
	
	@Test def void testForwardReferenceInExpression() {
		'''var i = j var j = 10'''.parse => [
			assertError(ExpressionsPackage.eINSTANCE.variableRef, 
				ExpressionsValidator.FORWARD_REFERENCE, 
				"variable forward reference not allowed: 'j'"
			)
		]
	}
	
	@Test def void testNoForwardReference() {
		'''var j = 10 var i = j'''.parse.assertNoErrors
	}
	
	def void assertVariablesDefinedBefore(ExpressionsModel model, int elemIndex, CharSequence expectedVars) {
		expectedVars.assertEquals(
			model.elements.get(elemIndex).variablesDefinedBefore.map[name].join(",")
		)
	}
	
}
